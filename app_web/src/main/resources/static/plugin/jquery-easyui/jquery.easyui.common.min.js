$.extend($.fn.textbox.methods, {
	addClearBtn : function(jq, iconCls) {
		return jq.each(function() {
			//console.log("1245");
			var t = $(this);
			t.textbox();
			if (!t.textbox('getText')) {
				t.textbox('getIcon', 0).css('visibility', 'hidden');
			} else {
				t.textbox('getIcon', 0).css('visibility', 'visible');
			}
			t.textbox('textbox').bind('keyup', function() {
				var icon = t.textbox('getIcon', 0);
				if ($(this).val()) {
					icon.css('visibility', 'visible');
				} else {
					icon.css('visibility', 'hidden');
				}
			});
		});
	}
});

$(function() {
	$('.easyui-combobox').textbox().textbox('addClearBtn', 'icon-clear');
	$('.easyui-combotree').textbox().textbox('addClearBtn', 'icon-clear');
});
(function($) {
	$.fn.combotree.defaults.onHidePanel = function() {
		var tree = $(this).combotree('tree');
		var icon = $(this).textbox('getIcon', 0);
		var options = tree.tree('options');
		if (!options.multiple) {
			var v = tree.tree('getSelected');
			if (null == v) {
				$(this).combotree('clear');
			} else {
				$(this).combotree('setText', v.text);
			}
			var text = $(this).combotree("getText");
			if (!text) {
				icon.css('visibility', 'hidden');
			} else {
				icon.css('visibility', 'visible');
			}
		}
	}
	$.fn.combotree.defaults.icons = [ {
		iconCls : 'icon-clear',
		handler : function(e) {
			$(e.handleObj.data.target).combotree('clear');
			var text = $(e.handleObj.data.target).combotree("getText");
			if (!text) {
				$(this).css('visibility', 'hidden');
			}
		}
	} ];
	$.fn.combobox.defaults.onHidePanel = function() {
		var options = $(this).combobox('options');
		if (!options.multiple) {
			var textField = options.textField;
			var text = $(this).combobox("getText");
			var allData = $(this).combobox("getData");
			var result = true; //为true说明输入的值在下拉框数据中不存在
			var icon = $(this).textbox('getIcon', 0);
			for (var i = 0; i < allData.length; i++) {
				if (text == allData[i][textField]) {
					result = false;
				}
			}
			if (result) {
				$(this).combobox("clear");
			}
			if (!text) {
				icon.css('visibility', 'hidden');
			} else {
				icon.css('visibility', 'visible');
			}
		}
	}
	$.fn.combobox.defaults.icons = [ {
		iconCls : 'icon-clear',
		handler : function(e) {
			$(e.handleObj.data.target).combobox('clear');
			var text = $(e.handleObj.data.target).combobox("getText");
			if (!text) {
				$(this).css('visibility', 'hidden');
			}
		}
	} ];
	/*$.extend($.fn.validatebox.defaults.rules, { 
		idCode : {
	        validator : function(value) {  
	             return /(^\d{15}$)|(^\d{18}$)|(^\d{17}(\d|X|x)$)/.test(value); 
	        },  
	        message : '请输入正确的身份证号'  
	    }
	});   */
	$.extend($.fn.validatebox.defaults.rules,
		{
			//regExpVal[/^[\u0391-\uFFE5]+$/,\'请输入正确内容\']' 
			// 第一个参数正则表达,第二个参数显示错误信息
			regExpVal : {
				validator : function(value, param) {
					var t = new RegExp(param[0]);
					validateMessage = param[1];
					return t.test(value);
				},
				message : '{1}'
			},
			checkEmail : {
				validator : function(value) {
					var t = /^[a-z0-9]+([._\\-]*[a-z0-9])*@([a-z0-9]+[-a-z0-9]*[a-z0-9]+.){1,63}[a-z0-9]+$/;
					return t.test(value);
				},
				message : '输入正确的邮箱格式'
			},
			checkDate : {
				validator : function(value, param) {
					var t = /^((?:19|20)\d\d)-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])\s*((20|21|22|23|[0-1]\d):[0-5]\d)?(:[0-5]\d)?$/;
					return t.test(value);
				},
				message : '输入正确的日期格式，例如2018-06-06'
			},

			checkDateTime : {
				validator : function(value, param) {
					var t = /^[1-9]\d{3}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])\s+(20|21|22|23|[0-1]\d):[0-5]\d:[0-5]\d$/;
					return t.test(value);
				},
				message : '输入正确的日期时间格式，例如2014-01-01 12:00:00'
			},
			checkTime : {
				validator : function(value, param) {
					var t = /^(20|21|22|23|[0-1]\d):[0-5]\d:[0-5]\d$/;
					return t.test(value);
				},
				message : '输入正确的时间格式，例如12:00:00'
			},
			idCode : {
				validator : function(value) {
					return /(^\d{15}$)|(^\d{18}$)|(^\d{17}(\d|X|x)$)/
							.test(value);
				},
				message : '请输入正确的身份证号'
			},
			CHS : {
				validator : function(value, param) {
					return /^[\u0391-\uFFE5]+$/.test(value);
				},
				message : '请输入汉字'
			},
			english : {// 验证英语
				validator : function(value) {
					return /^[A-Za-z]+$/i.test(value);
				},
				message : '请输入英文'
			},
			ip : {// 验证IP地址
				validator : function(value) {
					return /\d+\.\d+\.\d+\.\d+/.test(value);
				},
				message : 'IP地址格式不正确'
			},
			ZIP : {
				validator : function(value, param) {
					return /^[0-9]\d{5}$/.test(value);
				},
				message : '邮政编码不存在'
			},
			QQ : {
				validator : function(value, param) {
					return /^[1-9]\d{4,10}$/.test(value);
				},
				message : 'QQ号码不正确'
			},
			mobile : {
				validator : function(value, param) {
					return /^(?:13\d|15\d|17\d|18\d)-?\d{5}(\d{3}|\*{3})$/
							.test(value);
				},
				message : '手机号码不正确'
			},
			tel : {
				validator : function(value, param) {
					return /^(\d{3}-|\d{4}-)?(\d{8}|\d{7})?(-\d{1,6})?$/
							.test(value);
				},
				message : '电话号码不正确'
			},
			mobileAndTel: {
				validator: function (value, param) {
					return /(^([0\+]\d{2,3})\d{3,4}\-\d{3,8}$)|(^([0\+]\d{2,3})\d{3,4}\d{3,8}$)|(^([0\+]\d{2,3}){0,1}13\d{9}$)|(^\d{3,4}\d{3,8}$)|(^\d{3,4}\-\d{3,8}$)/.test(value);
				},
				message: '请正确输入电话号码'
			},
			number : {
				validator : function(value, param) {
					return /^[0-9]+.?[0-9]*$/.test(value);
				},
				message : '请输入数字'
			},
			money : {
				validator : function(value, param) {
					return (/^(([1-9]\d*)|\d)(\.\d{1,2})?$/)
							.test(value);
				},
				message : '请输入正确的金额'

			},
			mone : {
				validator : function(value, param) {
					return (/^(([1-9]\d*)|\d)(\.\d{1,2})?$/)
							.test(value);
				},
				message : '请输入整数或小数'

			},
			integer : {
				validator : function(value, param) {
					return /^[+]?[1-9]\d*$/.test(value);
				},
				message : '请输入最小为1的整数'
			},
			integ : {
				validator : function(value, param) {
					return /^[+]?[0-9]\d*$/.test(value);
				},
				message : '请输入整数'
			},
			range : {
				validator : function(value, param) {
					if (/^[1-9]\d*$/.test(value)) {
						return value >= param[0]
								&& value <= param[1]
					} else {
						return false;
					}
				},
				message : '输入的数字在{0}到{1}之间'
			},
			minLength : {
				validator : function(value, param) {
					var len = 0;
					for (var i = 0; i < value.length; i++) {
						var c = value.charCodeAt(i) > 255 ? 2 : 1;
						len += c;
					}
					return len >= param[0];
				},
				message : '至少输入{0}个字'
			},
			maxLength : {
				validator : function(value, param) {
					//return value.length<=param[0]
					var len = 0;
					for (var i = 0; i < value.length; i++) {
						var c = value.charCodeAt(i) > 255 ? 2 : 1;
						len += c;
					}
					return len <= param[0];
				},
				message : '最多{0}个字,中文算两个字'
			},
			//select即选择框的验证
			selectValid : {
				validator : function(value, param) {
					if (value == param[0]) {
						return false;
					} else {
						return true;
					}
				},
				message : '请选择'
			},
			idCode : {
				validator : function(value, param) {
					return /(^\d{15}$)|(^\d{18}$)|(^\d{17}(\d|X|x)$)/
							.test(value);
				},
				message : '请输入正确的身份证号'
			},
			loginName : {
				validator : function(value, param) {
					return /^[\u0391-\uFFE5\w]+$/.test(value);
				},
				message : '登录名称只允许汉字、英文字母、数字及下划线。'
			},
			equalTo : {
				validator : function(value, param) {
					return value == $(param[0]).val();
				},
				message : '两次输入的字符不一至'
			},
			englishOrNum : {// 只能输入英文和数字
				validator : function(value) {
					return /^[a-zA-Z0-9_ ]{1,}$/.test(value);
				},
				message : '请输入英文、数字、下划线或者空格'
			},
			xiaoshu : {
				validator : function(value) {
					return /^(([1-9]+)|([0-9]+\.[0-9]{1,2}))$/
							.test(value);
				},
				message : '最多保留两位小数！'
			},
			ddPrice : {
				validator : function(value, param) {
					if (/^[1-9]\d*$/.test(value)) {
						return value >= param[0]
								&& value <= param[1];
					} else {
						return false;
					}
				},
				message : '请输入1到100之间正整数'
			},
			jretailUpperLimit : {
				validator : function(value, param) {
					if (/^[0-9]+([.]{1}[0-9]{1,2})?$/.test(value)) {
						return parseFloat(value) > parseFloat(param[0])
								&& parseFloat(value) <= parseFloat(param[1]);
					} else {
						return false;
					}
				},
				message : '请输入0到100之间的最多俩位小数的数字'
			},
			rateCheck : {
				validator : function(value, param) {
					if (/^[0-9]+([.]{1}[0-9]{1,2})?$/.test(value)) {
						return parseFloat(value) > parseFloat(param[0])
								&& parseFloat(value) <= parseFloat(param[1]);
					} else {
						return false;
					}
				},
				message : '请输入0到1000之间的最多俩位小数的数字'
			}
		});

})(jQuery);

function jsToUpperCase() {
	this.value = this.value.toUpperCase();
}
